// Generated by CoffeeScript 1.4.0
(function() {
  var OPERATIONS, filters;

  filters = typeof exports !== "undefined" && exports !== null ? exports : this;

  OPERATIONS = {
    equals: {
      short_code: 'eq',
      display: 'equals',
      operation: '=='
    },
    doesnotequal: {
      short_code: 'ne',
      display: 'does not equal',
      operation: '!='
    },
    greaterthan: {
      short_code: 'gt',
      display: 'greater than',
      operation: '>'
    },
    greaterthanequalto: {
      short_code: 'gte',
      display: 'greater than equal to',
      operation: '>='
    },
    lessthan: {
      short_code: 'lt',
      display: 'less than',
      operation: '<'
    },
    lessthanequalto: {
      short_code: 'lte',
      display: 'less than equal to',
      operation: '<='
    }
  };

  filters.Event = (function() {

    function Event(event_name, fields) {
      this.event_name = event_name;
      this.fields = fields != null ? fields : [];
      return;
    }

    Event.prototype.load_fields = function(url) {
      /*
              Given a url, perform a get request for the specific fields
      */
      return $.get(url, {
        event_name: this.event_name
      }, function(data, status, xhr) {
        return this.fields = data.fields;
      });
    };

    Event.get_events = function(url, cb) {
      /*
              Given a url, get the possible events for the system
              and then call the callback function
      */
      return $.get(url, {}, cb);
    };

    return Event;

  })();

  filters.Rule = (function() {

    function Rule(field_name, value, operation) {
      this.field_name = field_name;
      this.value = value;
      if (typeof operation === 'string') {
        if (OPERATIONS.hasOwnProperty(operation)) {
          this.operation = OPERATIONS[operation];
        } else {
          throw Error('Not a valid operation.');
        }
      } else {
        throw Error('Custom operations not supported yet.');
      }
    }

    Rule.prototype.to_json = function() {
      return {
        field: this.field,
        operation: this.operation,
        value: this.value
      };
    };

    return Rule;

  })();

  filters.Filter = (function() {

    function Filter(operator, event, event_name) {
      this.operator = operator;
      this.event = event;
      this.event_name = event_name;
      this.rules = {};
    }

    Filter.prototype.add_expression = function(expr) {
      if (this.rules.hasOwnProperty(expr.event_name)) {
        this.rules[expr.event_name] = [];
      }
      return this.rules[expr.event_name].push(expr);
    };

    Filter.prototype.to_json = function() {
      /*
              Format of the rules json that should be accepted by the server
              {
                  "operator": "and|or",
                  "event_name": String,
                  "rules": [
                          "field": String,
                          "operation": Object,
                          "value": String|Number
                      , ...
                  ]
              }
      */

      var rule, rules, rules_list, _i, _j, _len, _len1, _ref;
      rules_list = [];
      _ref = this.rules;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rules = _ref[_i];
        for (_j = 0, _len1 = rules.length; _j < _len1; _j++) {
          rule = rules[_j];
          rules_list.push(rule.to_json());
        }
      }
      return {
        operator: this.operator,
        event_name: this.event_name,
        rules: rules_list
      };
    };

    return Filter;

  })();

}).call(this);
